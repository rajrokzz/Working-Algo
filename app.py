# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dTTLbVleKy2e2IAecXQu9LBjf4cC_EZO
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# --- Load your cleaned data ---
@st.cache_data
def load_data():
    df = pd.read_csv('nifty_cleaned.csv', parse_dates=['Date'])
    df = df[['Date', 'Open', 'High', 'Low', 'Close', 'Volume']]
    df = df.dropna()
    df = df.sort_values('Date')
    df.set_index('Date', inplace=True)
    return df

nifty = load_data()

st.title("NIFTY 50 Forecast Dashboard (ARIMA, Holt-Winters, Prophet, RF, LSTM)")
st.subheader("Recent NIFTY 50 Data")
st.dataframe(nifty.tail())

# --- ARIMA Forecast ---
from statsmodels.tsa.arima.model import ARIMA
arima_model = ARIMA(nifty['Close'], order=(1,1,1)).fit()
arima_forecast = arima_model.forecast(steps=1).iloc[0]
st.write(f"**ARIMA forecast (next close):** {arima_forecast:.2f}")

# --- Holt-Winters Forecast ---
from statsmodels.tsa.holtwinters import ExponentialSmoothing
hw_model = ExponentialSmoothing(nifty['Close'], trend='add', seasonal=None).fit()
hw_forecast = hw_model.forecast(steps=1).iloc[0]
st.write(f"**Holt-Winters forecast (next close):** {hw_forecast:.2f}")

# --- Prophet Forecast ---
from prophet import Prophet
df_prophet = nifty.reset_index()[['Date', 'Close']].rename(columns={'Date':'ds', 'Close':'y'})
df_prophet['ds'] = pd.to_datetime(df_prophet['ds'])
df_prophet['y'] = pd.to_numeric(df_prophet['y'], errors='coerce')
df_prophet = df_prophet.dropna(subset=['ds', 'y'])
prophet_model = Prophet()
prophet_model.fit(df_prophet)
future = prophet_model.make_future_dataframe(periods=1)
forecast_prophet = prophet_model.predict(future)
prophet_forecast = forecast_prophet.iloc[-1]['yhat']
st.write(f"**Prophet forecast (next close):** {prophet_forecast:.2f}")

# --- Random Forest Forecast ---
from sklearn.ensemble import RandomForestRegressor
nifty_ml = nifty.copy()
nifty_ml['lag1'] = nifty_ml['Close'].shift(1)
nifty_ml['lag2'] = nifty_ml['Close'].shift(2)
nifty_ml = nifty_ml.dropna()
X = nifty_ml[['lag1', 'lag2']]
y = nifty_ml['Close']
X_train, y_train = X[:-1], y[:-1]
X_test = X[-1:]
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_forecast = rf_model.predict(X_test)[0]
st.write(f"**Random Forest forecast (next close):** {rf_forecast:.2f}")

# --- LSTM Forecast ---
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

close_prices = nifty['Close'].values.reshape(-1, 1)
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_close = scaler.fit_transform(close_prices)
sequence_length = 60
X_lstm, y_lstm = [], []
for i in range(sequence_length, len(scaled_close)):
    X_lstm.append(scaled_close[i-sequence_length:i, 0])
    y_lstm.append(scaled_close[i, 0])
X_lstm, y_lstm = np.array(X_lstm), np.array(y_lstm)
X_lstm = np.reshape(X_lstm, (X_lstm.shape[0], X_lstm.shape[1], 1))
split = int(0.8 * len(X_lstm))
X_train_lstm, y_train_lstm = X_lstm[:split], y_lstm[:split]
X_test_lstm, y_test_lstm = X_lstm[split:], y_lstm[split:]

model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train_lstm.shape[1], 1)))
model.add(LSTM(units=50))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train_lstm, y_train_lstm, epochs=5, batch_size=32, verbose=0)

last_sequence = scaled_close[-sequence_length:]
last_sequence = last_sequence.reshape((1, sequence_length, 1))
next_pred_scaled = model.predict(last_sequence)
lstm_forecast = scaler.inverse_transform(next_pred_scaled)[0,0]
st.write(f"**LSTM forecast (next close):** {lstm_forecast:.2f}")

# --- Plot ---
fig, ax = plt.subplots(figsize=(12,6))
ax.plot(nifty.index, nifty['Close'], label='Actual')
ax.axhline(arima_forecast, color='red', linestyle='--', label='ARIMA')
ax.axhline(hw_forecast, color='orange', linestyle='--', label='Holt-Winters')
ax.axhline(prophet_forecast, color='green', linestyle='--', label='Prophet')
ax.axhline(rf_forecast, color='purple', linestyle='--', label='Random Forest')
ax.axhline(lstm_forecast, color='blue', linestyle='--', label='LSTM')
ax.legend()
st.pyplot(fig)

st.info("Refresh the page daily to see updated forecasts with the latest data.")